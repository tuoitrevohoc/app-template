// Code generated by ent, DO NOT EDIT.

package invoice

import (
	"entgo.io/ent/dialect/sql"
	"github.com/tuoitrevohoc/app-template/api/pkg/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTitle, v))
}

// LeetCodeLink applies equality check predicate on the "leet_code_link" field. It's identical to LeetCodeLinkEQ.
func LeetCodeLink(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldLeetCodeLink, v))
}

// InvoicedTo applies equality check predicate on the "invoiced_to" field. It's identical to InvoicedToEQ.
func InvoicedTo(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldInvoicedTo, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldTitle, v))
}

// LeetCodeLinkEQ applies the EQ predicate on the "leet_code_link" field.
func LeetCodeLinkEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldLeetCodeLink, v))
}

// LeetCodeLinkNEQ applies the NEQ predicate on the "leet_code_link" field.
func LeetCodeLinkNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldLeetCodeLink, v))
}

// LeetCodeLinkIn applies the In predicate on the "leet_code_link" field.
func LeetCodeLinkIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldLeetCodeLink, vs...))
}

// LeetCodeLinkNotIn applies the NotIn predicate on the "leet_code_link" field.
func LeetCodeLinkNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldLeetCodeLink, vs...))
}

// LeetCodeLinkGT applies the GT predicate on the "leet_code_link" field.
func LeetCodeLinkGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldLeetCodeLink, v))
}

// LeetCodeLinkGTE applies the GTE predicate on the "leet_code_link" field.
func LeetCodeLinkGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldLeetCodeLink, v))
}

// LeetCodeLinkLT applies the LT predicate on the "leet_code_link" field.
func LeetCodeLinkLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldLeetCodeLink, v))
}

// LeetCodeLinkLTE applies the LTE predicate on the "leet_code_link" field.
func LeetCodeLinkLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldLeetCodeLink, v))
}

// LeetCodeLinkContains applies the Contains predicate on the "leet_code_link" field.
func LeetCodeLinkContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldLeetCodeLink, v))
}

// LeetCodeLinkHasPrefix applies the HasPrefix predicate on the "leet_code_link" field.
func LeetCodeLinkHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldLeetCodeLink, v))
}

// LeetCodeLinkHasSuffix applies the HasSuffix predicate on the "leet_code_link" field.
func LeetCodeLinkHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldLeetCodeLink, v))
}

// LeetCodeLinkEqualFold applies the EqualFold predicate on the "leet_code_link" field.
func LeetCodeLinkEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldLeetCodeLink, v))
}

// LeetCodeLinkContainsFold applies the ContainsFold predicate on the "leet_code_link" field.
func LeetCodeLinkContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldLeetCodeLink, v))
}

// InvoicedToEQ applies the EQ predicate on the "invoiced_to" field.
func InvoicedToEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEQ(FieldInvoicedTo, v))
}

// InvoicedToNEQ applies the NEQ predicate on the "invoiced_to" field.
func InvoicedToNEQ(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNEQ(FieldInvoicedTo, v))
}

// InvoicedToIn applies the In predicate on the "invoiced_to" field.
func InvoicedToIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldIn(FieldInvoicedTo, vs...))
}

// InvoicedToNotIn applies the NotIn predicate on the "invoiced_to" field.
func InvoicedToNotIn(vs ...string) predicate.Invoice {
	return predicate.Invoice(sql.FieldNotIn(FieldInvoicedTo, vs...))
}

// InvoicedToGT applies the GT predicate on the "invoiced_to" field.
func InvoicedToGT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGT(FieldInvoicedTo, v))
}

// InvoicedToGTE applies the GTE predicate on the "invoiced_to" field.
func InvoicedToGTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldGTE(FieldInvoicedTo, v))
}

// InvoicedToLT applies the LT predicate on the "invoiced_to" field.
func InvoicedToLT(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLT(FieldInvoicedTo, v))
}

// InvoicedToLTE applies the LTE predicate on the "invoiced_to" field.
func InvoicedToLTE(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldLTE(FieldInvoicedTo, v))
}

// InvoicedToContains applies the Contains predicate on the "invoiced_to" field.
func InvoicedToContains(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContains(FieldInvoicedTo, v))
}

// InvoicedToHasPrefix applies the HasPrefix predicate on the "invoiced_to" field.
func InvoicedToHasPrefix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasPrefix(FieldInvoicedTo, v))
}

// InvoicedToHasSuffix applies the HasSuffix predicate on the "invoiced_to" field.
func InvoicedToHasSuffix(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldHasSuffix(FieldInvoicedTo, v))
}

// InvoicedToEqualFold applies the EqualFold predicate on the "invoiced_to" field.
func InvoicedToEqualFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldEqualFold(FieldInvoicedTo, v))
}

// InvoicedToContainsFold applies the ContainsFold predicate on the "invoiced_to" field.
func InvoicedToContainsFold(v string) predicate.Invoice {
	return predicate.Invoice(sql.FieldContainsFold(FieldInvoicedTo, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Invoice) predicate.Invoice {
	return predicate.Invoice(func(s *sql.Selector) {
		p(s.Not())
	})
}
