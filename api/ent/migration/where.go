// Code generated by ent, DO NOT EDIT.

package migration

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/tuoitrevohoc/app-template/api/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Migration {
	return predicate.Migration(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Migration {
	return predicate.Migration(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Migration {
	return predicate.Migration(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Migration {
	return predicate.Migration(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Migration {
	return predicate.Migration(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Migration {
	return predicate.Migration(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Migration {
	return predicate.Migration(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Migration {
	return predicate.Migration(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Migration {
	return predicate.Migration(sql.FieldLTE(FieldID, id))
}

// Migration applies equality check predicate on the "migration" field. It's identical to MigrationEQ.
func Migration(v string) predicate.Migration {
	return predicate.Migration(sql.FieldEQ(FieldMigration, v))
}

// ExecutionAt applies equality check predicate on the "execution_at" field. It's identical to ExecutionAtEQ.
func ExecutionAt(v time.Time) predicate.Migration {
	return predicate.Migration(sql.FieldEQ(FieldExecutionAt, v))
}

// MigrationEQ applies the EQ predicate on the "migration" field.
func MigrationEQ(v string) predicate.Migration {
	return predicate.Migration(sql.FieldEQ(FieldMigration, v))
}

// MigrationNEQ applies the NEQ predicate on the "migration" field.
func MigrationNEQ(v string) predicate.Migration {
	return predicate.Migration(sql.FieldNEQ(FieldMigration, v))
}

// MigrationIn applies the In predicate on the "migration" field.
func MigrationIn(vs ...string) predicate.Migration {
	return predicate.Migration(sql.FieldIn(FieldMigration, vs...))
}

// MigrationNotIn applies the NotIn predicate on the "migration" field.
func MigrationNotIn(vs ...string) predicate.Migration {
	return predicate.Migration(sql.FieldNotIn(FieldMigration, vs...))
}

// MigrationGT applies the GT predicate on the "migration" field.
func MigrationGT(v string) predicate.Migration {
	return predicate.Migration(sql.FieldGT(FieldMigration, v))
}

// MigrationGTE applies the GTE predicate on the "migration" field.
func MigrationGTE(v string) predicate.Migration {
	return predicate.Migration(sql.FieldGTE(FieldMigration, v))
}

// MigrationLT applies the LT predicate on the "migration" field.
func MigrationLT(v string) predicate.Migration {
	return predicate.Migration(sql.FieldLT(FieldMigration, v))
}

// MigrationLTE applies the LTE predicate on the "migration" field.
func MigrationLTE(v string) predicate.Migration {
	return predicate.Migration(sql.FieldLTE(FieldMigration, v))
}

// MigrationContains applies the Contains predicate on the "migration" field.
func MigrationContains(v string) predicate.Migration {
	return predicate.Migration(sql.FieldContains(FieldMigration, v))
}

// MigrationHasPrefix applies the HasPrefix predicate on the "migration" field.
func MigrationHasPrefix(v string) predicate.Migration {
	return predicate.Migration(sql.FieldHasPrefix(FieldMigration, v))
}

// MigrationHasSuffix applies the HasSuffix predicate on the "migration" field.
func MigrationHasSuffix(v string) predicate.Migration {
	return predicate.Migration(sql.FieldHasSuffix(FieldMigration, v))
}

// MigrationEqualFold applies the EqualFold predicate on the "migration" field.
func MigrationEqualFold(v string) predicate.Migration {
	return predicate.Migration(sql.FieldEqualFold(FieldMigration, v))
}

// MigrationContainsFold applies the ContainsFold predicate on the "migration" field.
func MigrationContainsFold(v string) predicate.Migration {
	return predicate.Migration(sql.FieldContainsFold(FieldMigration, v))
}

// ExecutionAtEQ applies the EQ predicate on the "execution_at" field.
func ExecutionAtEQ(v time.Time) predicate.Migration {
	return predicate.Migration(sql.FieldEQ(FieldExecutionAt, v))
}

// ExecutionAtNEQ applies the NEQ predicate on the "execution_at" field.
func ExecutionAtNEQ(v time.Time) predicate.Migration {
	return predicate.Migration(sql.FieldNEQ(FieldExecutionAt, v))
}

// ExecutionAtIn applies the In predicate on the "execution_at" field.
func ExecutionAtIn(vs ...time.Time) predicate.Migration {
	return predicate.Migration(sql.FieldIn(FieldExecutionAt, vs...))
}

// ExecutionAtNotIn applies the NotIn predicate on the "execution_at" field.
func ExecutionAtNotIn(vs ...time.Time) predicate.Migration {
	return predicate.Migration(sql.FieldNotIn(FieldExecutionAt, vs...))
}

// ExecutionAtGT applies the GT predicate on the "execution_at" field.
func ExecutionAtGT(v time.Time) predicate.Migration {
	return predicate.Migration(sql.FieldGT(FieldExecutionAt, v))
}

// ExecutionAtGTE applies the GTE predicate on the "execution_at" field.
func ExecutionAtGTE(v time.Time) predicate.Migration {
	return predicate.Migration(sql.FieldGTE(FieldExecutionAt, v))
}

// ExecutionAtLT applies the LT predicate on the "execution_at" field.
func ExecutionAtLT(v time.Time) predicate.Migration {
	return predicate.Migration(sql.FieldLT(FieldExecutionAt, v))
}

// ExecutionAtLTE applies the LTE predicate on the "execution_at" field.
func ExecutionAtLTE(v time.Time) predicate.Migration {
	return predicate.Migration(sql.FieldLTE(FieldExecutionAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Migration) predicate.Migration {
	return predicate.Migration(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Migration) predicate.Migration {
	return predicate.Migration(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Migration) predicate.Migration {
	return predicate.Migration(func(s *sql.Selector) {
		p(s.Not())
	})
}
