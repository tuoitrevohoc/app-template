// Code generated by ent, DO NOT EDIT.

package ent

// CreateInvoiceInput represents a mutation input for creating invoices.
type CreateInvoiceInput struct {
	Title        string
	LeetCodeLink string
	InvoicedTo   string
}

// Mutate applies the CreateInvoiceInput on the InvoiceMutation builder.
func (i *CreateInvoiceInput) Mutate(m *InvoiceMutation) {
	m.SetTitle(i.Title)
	m.SetLeetCodeLink(i.LeetCodeLink)
	m.SetInvoicedTo(i.InvoicedTo)
}

// SetInput applies the change-set in the CreateInvoiceInput on the InvoiceCreate builder.
func (c *InvoiceCreate) SetInput(i CreateInvoiceInput) *InvoiceCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreatePermissionInput represents a mutation input for creating permissions.
type CreatePermissionInput struct {
	Name        string
	Description string
	RoleIDs     []int
}

// Mutate applies the CreatePermissionInput on the PermissionMutation builder.
func (i *CreatePermissionInput) Mutate(m *PermissionMutation) {
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	if v := i.RoleIDs; len(v) > 0 {
		m.AddRoleIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePermissionInput on the PermissionCreate builder.
func (c *PermissionCreate) SetInput(i CreatePermissionInput) *PermissionCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateRoleInput represents a mutation input for creating roles.
type CreateRoleInput struct {
	Name          string
	Description   string
	UserIDs       []int
	PermissionIDs []int
}

// Mutate applies the CreateRoleInput on the RoleMutation builder.
func (i *CreateRoleInput) Mutate(m *RoleMutation) {
	m.SetName(i.Name)
	m.SetDescription(i.Description)
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.PermissionIDs; len(v) > 0 {
		m.AddPermissionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateRoleInput on the RoleCreate builder.
func (c *RoleCreate) SetInput(i CreateRoleInput) *RoleCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Username string
	Password string
	RoleID   *int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetUsername(i.Username)
	m.SetPassword(i.Password)
	if v := i.RoleID; v != nil {
		m.SetRoleID(*v)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}
