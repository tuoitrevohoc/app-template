directive @goField(
  forceResolver: Boolean
  name: String
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateInvoiceInput is used for create Invoice object.
Input was generated by ent.
"""
input CreateInvoiceInput {
  title: String!
  leetCodeLink: String!
  invoicedTo: String!
}
"""
CreatePermissionInput is used for create Permission object.
Input was generated by ent.
"""
input CreatePermissionInput {
  """
  Name of the permission
  """
  name: String!
  description: String!
  roleIDs: [ID!]
}
"""
CreateRoleInput is used for create Role object.
Input was generated by ent.
"""
input CreateRoleInput {
  name: RoleName!
  description: String!
  userIDs: [ID!]
  permissionIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  """
  The username
  """
  username: String!
  """
  Hashed password
  """
  password: String!
  roleID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Invoice implements Node {
  id: ID!
  title: String!
  leetCodeLink: String!
  invoicedTo: String!
}
"""
A connection to a list of items.
"""
type InvoiceConnection {
  """
  A list of edges.
  """
  edges: [InvoiceEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type InvoiceEdge {
  """
  The item at the end of the edge.
  """
  node: Invoice
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type Migration implements Node {
  id: ID!
  migration: String!
  executionAt: Time!
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node
  @goModel(
    model: "github.com/tuoitrevohoc/app-template/backend/pkg/ent.Noder"
  ) {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Permission implements Node {
  id: ID!
  """
  Name of the permission
  """
  name: String!
  description: String!
  roles: [Role!]
}
"""
A connection to a list of items.
"""
type PermissionConnection {
  """
  A list of edges.
  """
  edges: [PermissionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PermissionEdge {
  """
  The item at the end of the edge.
  """
  node: Permission
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  invoices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): InvoiceConnection!
  permissions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): PermissionConnection!
  roles(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): RoleConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
  ): UserConnection!
}
type Role implements Node {
  id: ID!
  name: RoleName!
  description: String!
  users: [User!]
  permissions: [Permission!]
}
"""
A connection to a list of items.
"""
type RoleConnection {
  """
  A list of edges.
  """
  edges: [RoleEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type RoleEdge {
  """
  The item at the end of the edge.
  """
  node: Role
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
RoleName is enum for the field name
"""
enum RoleName
  @goModel(
    model: "github.com/tuoitrevohoc/app-template/backend/pkg/ent/role.Name"
  ) {
  User
  Administrator
}
"""
The builtin Time type
"""
scalar Time
type User implements Node {
  id: ID!
  """
  The username
  """
  username: String!
  role: Role
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
