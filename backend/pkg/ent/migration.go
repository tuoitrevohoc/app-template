// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/tuoitrevohoc/app-template/backend/pkg/ent/migration"
)

// Migration is the model entity for the Migration schema.
type Migration struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Migration holds the value of the "migration" field.
	Migration string `json:"migration,omitempty"`
	// ExecutionAt holds the value of the "execution_at" field.
	ExecutionAt time.Time `json:"execution_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Migration) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case migration.FieldID:
			values[i] = new(sql.NullInt64)
		case migration.FieldMigration:
			values[i] = new(sql.NullString)
		case migration.FieldExecutionAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Migration", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Migration fields.
func (m *Migration) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case migration.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case migration.FieldMigration:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field migration", values[i])
			} else if value.Valid {
				m.Migration = value.String
			}
		case migration.FieldExecutionAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field execution_at", values[i])
			} else if value.Valid {
				m.ExecutionAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Migration.
// Note that you need to call Migration.Unwrap() before calling this method if this Migration
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Migration) Update() *MigrationUpdateOne {
	return NewMigrationClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Migration entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Migration) Unwrap() *Migration {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Migration is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Migration) String() string {
	var builder strings.Builder
	builder.WriteString("Migration(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("migration=")
	builder.WriteString(m.Migration)
	builder.WriteString(", ")
	builder.WriteString("execution_at=")
	builder.WriteString(m.ExecutionAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Migrations is a parsable slice of Migration.
type Migrations []*Migration

func (m Migrations) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
