// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tuoitrevohoc/app-template/backend/pkg/ent/migration"
	"github.com/tuoitrevohoc/app-template/backend/pkg/ent/predicate"
)

// MigrationUpdate is the builder for updating Migration entities.
type MigrationUpdate struct {
	config
	hooks    []Hook
	mutation *MigrationMutation
}

// Where appends a list predicates to the MigrationUpdate builder.
func (mu *MigrationUpdate) Where(ps ...predicate.Migration) *MigrationUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetMigration sets the "migration" field.
func (mu *MigrationUpdate) SetMigration(s string) *MigrationUpdate {
	mu.mutation.SetMigration(s)
	return mu
}

// SetExecutionAt sets the "execution_at" field.
func (mu *MigrationUpdate) SetExecutionAt(t time.Time) *MigrationUpdate {
	mu.mutation.SetExecutionAt(t)
	return mu
}

// SetNillableExecutionAt sets the "execution_at" field if the given value is not nil.
func (mu *MigrationUpdate) SetNillableExecutionAt(t *time.Time) *MigrationUpdate {
	if t != nil {
		mu.SetExecutionAt(*t)
	}
	return mu
}

// Mutation returns the MigrationMutation object of the builder.
func (mu *MigrationUpdate) Mutation() *MigrationMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MigrationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, MigrationMutation](ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MigrationUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MigrationUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MigrationUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MigrationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   migration.Table,
			Columns: migration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: migration.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Migration(); ok {
		_spec.SetField(migration.FieldMigration, field.TypeString, value)
	}
	if value, ok := mu.mutation.ExecutionAt(); ok {
		_spec.SetField(migration.FieldExecutionAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{migration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MigrationUpdateOne is the builder for updating a single Migration entity.
type MigrationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MigrationMutation
}

// SetMigration sets the "migration" field.
func (muo *MigrationUpdateOne) SetMigration(s string) *MigrationUpdateOne {
	muo.mutation.SetMigration(s)
	return muo
}

// SetExecutionAt sets the "execution_at" field.
func (muo *MigrationUpdateOne) SetExecutionAt(t time.Time) *MigrationUpdateOne {
	muo.mutation.SetExecutionAt(t)
	return muo
}

// SetNillableExecutionAt sets the "execution_at" field if the given value is not nil.
func (muo *MigrationUpdateOne) SetNillableExecutionAt(t *time.Time) *MigrationUpdateOne {
	if t != nil {
		muo.SetExecutionAt(*t)
	}
	return muo
}

// Mutation returns the MigrationMutation object of the builder.
func (muo *MigrationUpdateOne) Mutation() *MigrationMutation {
	return muo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MigrationUpdateOne) Select(field string, fields ...string) *MigrationUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Migration entity.
func (muo *MigrationUpdateOne) Save(ctx context.Context) (*Migration, error) {
	return withHooks[*Migration, MigrationMutation](ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MigrationUpdateOne) SaveX(ctx context.Context) *Migration {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MigrationUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MigrationUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MigrationUpdateOne) sqlSave(ctx context.Context) (_node *Migration, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   migration.Table,
			Columns: migration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: migration.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Migration.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, migration.FieldID)
		for _, f := range fields {
			if !migration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != migration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Migration(); ok {
		_spec.SetField(migration.FieldMigration, field.TypeString, value)
	}
	if value, ok := muo.mutation.ExecutionAt(); ok {
		_spec.SetField(migration.FieldExecutionAt, field.TypeTime, value)
	}
	_node = &Migration{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{migration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
